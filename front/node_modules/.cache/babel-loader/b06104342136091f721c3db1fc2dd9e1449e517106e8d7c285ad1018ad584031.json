{"ast":null,"code":"import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook() {\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  const useReduxContext =\n  // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : _s(() => {\n    _s();\n    return useContext(context);\n  }, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n  return _s2(function useStore() {\n    _s2();\n    const {\n      store\n    } = useReduxContext(); // @ts-ignore\n\n    return store;\n  }, \"qjqE1P4cxIR34tJenP4fiRmGXu0=\", false, function () {\n    return [useReduxContext];\n  });\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport const useStore = /*#__PURE__*/createStoreHook();","map":{"version":3,"names":["useContext","ReactReduxContext","useReduxContext","useDefaultReduxContext","createStoreHook","_s","$RefreshSig$","_s2","context","arguments","length","undefined","useStore","store"],"sources":["C:/Users/Admin/Desktop/rick-and-morthy/rick_and_morty/front/src/node_modules/react-redux/es/hooks/useStore.js"],"sourcesContent":["import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook(context = ReactReduxContext) {\n  const useReduxContext = // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : () => useContext(context);\n  return function useStore() {\n    const {\n      store\n    } = useReduxContext(); // @ts-ignore\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport const useStore = /*#__PURE__*/createStoreHook();"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,iBAAiB,QAAQ,uBAAuB;AACzD,SAASC,eAAe,IAAIC,sBAAsB,QAAQ,mBAAmB;AAC7E;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAeA,CAAA,EAA8B;EAAA,IAAAC,EAAA,GAAAC,YAAA;IAAAC,GAAA,GAAAD,YAAA;EAAA,IAA7BE,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,iBAAiB;EACzD,MAAMC,eAAe;EAAG;EACxBM,OAAO,KAAKP,iBAAiB,GAAGE,sBAAsB,GAAAE,EAAA,CAAG;IAAAA,EAAA;IAAA,OAAML,UAAU,CAACQ,OAAO,CAAC;EAAA;EAClF,OAAAD,GAAA,CAAO,SAASK,QAAQA,CAAA,EAAG;IAAAL,GAAA;IACzB,MAAM;MACJM;IACF,CAAC,GAAGX,eAAe,EAAE,CAAC,CAAC;;IAEvB,OAAOW,KAAK;EACd,CAAC;IAAA,QAHKX,eAAe;EAAA;AAIvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMU,QAAQ,GAAG,aAAaR,eAAe,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}